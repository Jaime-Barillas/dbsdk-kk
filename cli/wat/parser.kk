/*==============================================================================
 Wat Parser
 ----------
 Parse the subset of Wasm text format generated by running wasm2wat on
 WebAssembly generated by the Koka compiler. The code here is not very Koka
 idiomatic.
 =============================================================================*/
module wat/parser

import wat/types

import std/os/env // FIXME: DELETE ME

// \u009c == String Terminator - Sounds descriptive and, as per the spec,
// it should not appear literally within a string outside of an escape
// sequence. It _can_ appear inside comments!! Used as a default value when we
// reach the end of the parser input.
val no-char = '\u009c'

alias wat-parse = some<e> <parse-state|e>

// Effects and handlers to manage "global" parser state.
effect parse-state
  fun peek-char(): char
  fun consume-char(): ()
  fun get-parse-tree(): list<module-field>
  fun set-parse-tree(tree: list<module-field>): ()
  ctl parse-error(message: string): ()

// Starting rule.
// Todo: Remove console effect
pub fun parse(input: string): <div,console> parse-result
  var input-chars := input.list
  var parse-tree: list<module-field> := []
  with handler
    fun peek-char() head(input-chars, no-char)
    fun consume-char() input-chars := tail(input-chars)
    fun get-parse-tree() parse-tree
    fun set-parse-tree(tree: list<module-field>) parse-tree := tree
    ctl parse-error(message: string)
      println("Parser State: " ++ input-chars.show-list(show))
      ParseError(message)

  parse-tree := [parse-module-start()]
  // In Between stuff
  parse-tree := Cons(parse-module-end(), parse-tree)

  ParseOk(reverse(parse-tree))

fun expect(ch: char): parse-state ()
  val to-be-consumed = peek-char()
  if to-be-consumed == ch then
    consume-char()
  else
    parse-error("Expected " ++ ch.show ++ ", Got: " ++ to-be-consumed.show)

fun expect-string(s: string): parse-state ()
  foreach(s) fn(ch)
    expect(ch)

fun eat-whitespace(): wat-parse ()
  while {peek-char().is-white}
    consume-char()
    return ()

fun parse-module-start(): wat-parse module-field
  eat-whitespace()
  expect('(')
  expect-string("module")
  Module("(module")

fun parse-module-end(): wat-parse module-field
  eat-whitespace()
  expect(')')
  Other(")")

// For testing
fun main()
  val input = get-args().head("(module )")
  match parse(input)
    ParseError(msg) -> println(msg)
    ParseOk(tree) ->
      tree.map(show)
          .join("\n")
          .println