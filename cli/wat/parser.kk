/*==============================================================================
 Wat Parser
 ----------
 Parse the subset of Wasm text format generated by running wasm2wat on
 WebAssembly generated by the Koka compiler. The code here is not very Koka
 idiomatic.
 =============================================================================*/
module wat/parser

import wat/types

import std/os/env // FIXME: DELETE ME

// \u009c == String Terminator - Sounds descriptive and, as per the spec,
// it should not appear literally within a string outside of an escape
// sequence. It _can_ appear inside comments!! Used as a default value when we
// reach the end of the parser input.
val no-char = '\u009c'

alias wat-parse = some<e> <parse-state|e>

// Effects and handlers to manage "global" parser state.
effect parse-state
  val nxt-char: char
  fun consume-char(): char
  val parse-tree: list<module-field>
  fun set-parse-tree(tree: list<module-field>): ()

// Starting rule.
pub fun parse(input: string): div list<module-field>
  // Initial values will be replaced below with the _real_ initial values.
  val input-chars = ref(input.list)
  val parse-tree' = ref([Module("")])
  with handler
    val nxt-char = head(!input-chars, no-char)
    fun consume-char()
      val ret = head(!input-chars, no-char)
      input-chars := tail(!input-chars)
      ret
    val parse-tree = !parse-tree'
    fun set-parse-tree(tree: list<module-field>) parse-tree' := tree

  parse-tree' := [parse-module-start()]
  // In Between stuff
  parse-tree' := Cons(parse-module-end(), !parse-tree')

  reverse(!parse-tree')

// TODO: Parse Errors

fun expect(ch: char): parse-state ()
  if nxt-char == ch then
    consume-char()
    return ()

fun expect-string(s: string): parse-state ()
  foreach(s) fn(ch)
    expect(ch)

fun eat-whitespace(): wat-parse ()
  while {nxt-char.is-white}
    consume-char()
    return ()

fun parse-module-start(): wat-parse module-field
  eat-whitespace()
  expect('(')
  expect-string("module")
  Module("(module")

fun parse-module-end(): wat-parse module-field
  eat-whitespace()
  expect(')')
  Other(")")

// For testing
fun main()
  val input = get-args().head("(module )")
  parse(input)
    .map(show)
    .join("\n")
    .println